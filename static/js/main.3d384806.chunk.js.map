{"version":3,"sources":["util/date_time.js","store/weather_store.js","components/InfoCard.js","components/LoadingCard.js","pages/Home.js","pages/Initialize.js","serviceWorker.js","index.js","store/root_store.js","util/constants.js"],"names":["convertToCorrectFormate","timestamp","moment","format","WeatherStore","isCelcius","a","units","source","Axios","CancelToken","get","appId","res","filterAndSetData","data","console","log","visibleWeatherData","weatherData","slice","visibleDateStart","visibleDateEnd","this","makeObservable","observable","action","requiredData","list","forEach","item","i","dt","prevDate","first","second","f","s","isSame","checkIfSameDate","push","length","resetVisibleDate","value","isRefreshing","useStyles","makeStyles","root","padding","minWidth","title","fontSize","pos","marginBottom","InfoCard","convertedDate","temp","humidity","classes","Card","className","variant","CardContent","Typography","color","gutterBottom","component","CardActions","onClick","alert","Button","size","LoadingCard","Home","inject","observer","props","weatherStore","fetchWeatherData","setIsCelcius","setIsRefreshing","setState","onVisibleDateBack","onVisibleDateForward","Container","Paper","Row","Col","FormControlLabel","label","checked","control","Radio","onChange","v","_setIsCelcius","IconButton","map","jsDate","Date","key","main","toDateString","React","Component","Initialize","Boolean","window","location","hostname","match","rootStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports","process"],"mappings":"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","file":"static/js/main.3d384806.chunk.js","sourcesContent":["import moment from \"moment\";\n\nexport function checkIfSameDate(first, second) {\n  const f = convertToCorrectFormate(first);\n  const s = convertToCorrectFormate(second);\n  return moment(f).isSame(s, \"day\");\n}\n\nfunction convertToCorrectFormate(timestamp) {\n  return moment(timestamp * 1000).format(\"YYYY-MM-DD\");\n}\n","import Axios from \"axios\";\nimport { action, observable, makeObservable } from \"mobx\";\n\nimport { appId } from \"../util/constants\";\nimport { checkIfSameDate } from \"../util/date_time\";\n\nexport default class WeatherStore {\n  weatherData;\n  @observable isCelcius = false;\n  @observable visibleWeatherData;\n  @observable isRefreshing = false;\n\n  constructor() {\n    this.visibleDateEnd = 3;\n    this.visibleDateStart = 0;\n    makeObservable(this);\n  }\n\n  fetchWeatherData = async (isCelcius) => {\n    const units = isCelcius ? \"metric\" : \"imperial\";\n    try {\n      this.source = Axios.CancelToken.source();\n      const res = await Axios.get(\n        `http://api.openweathermap.org/data/2.5/forecast?q=Kathmandu&units=${units}&APPID=${appId}`\n      );\n      this.filterAndSetData(res.data);\n    } catch (e) {\n      console.log(\"Error\", e);\n    }\n  };\n\n  @action\n  filterAndSetData = (data) => {\n    let requiredData = [];\n    data.list.forEach((item, i) => {\n      const dt = item.dt;\n      if (this.prevDate && checkIfSameDate(this.prevDate, item.dt)) {\n        return null;\n      }\n      this.prevDate = dt;\n      requiredData.push(item);\n    });\n    this.weatherData = requiredData;\n    this.visibleWeatherData = requiredData.slice(\n      this.visibleDateStart,\n      this.visibleDateEnd\n    );\n  };\n\n  @action\n  onVisibleDateForward = () => {\n    if (this.visibleDateEnd === this.weatherData.length) return;\n    this.visibleDateEnd++;\n    this.visibleDateStart++;\n    this.resetVisibleDate();\n  };\n\n  @action\n  onVisibleDateBack = () => {\n    if (this.visibleDateStart === 0) return;\n    this.visibleDateEnd--;\n    this.visibleDateStart--;\n    this.resetVisibleDate();\n  };\n\n  resetVisibleDate = () => {\n    this.visibleWeatherData = this.weatherData.slice(\n      this.visibleDateStart,\n      this.visibleDateEnd\n    );\n  };\n\n  @action\n  setIsCelcius = (value = true) => (this.isCelcius = value);\n\n  @action\n  setIsRefreshing = (value = true) => (this.isRefreshing = value);\n}\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 5,\n    minWidth: 120,\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function InfoCard({ convertedDate, isCelcius, temp, humidity }) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          {convertedDate}\n        </Typography>\n        <Typography variant=\"h6\" component=\"h6\">\n          {temp}\n          {isCelcius ? \"˚C\" : \"˚F\"}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          Humidity - {humidity}\n        </Typography>\n      </CardContent>\n      <CardActions onClick={() => alert(\"Go to weather app for more info\")}>\n        <Button size=\"small\">Learn More</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 5,\n    minWidth: 120,\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function LoadingCard({ isCelcius }) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root} variant=\"outlined\">\n      <CardContent>\n        <Typography\n          className={classes.title}\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          ..........\n        </Typography>\n        <Typography variant=\"h6\" component=\"h6\">\n          --{isCelcius ? \"˚C\" : \"˚F\"}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n          Humidity - ....\n        </Typography>\n      </CardContent>\n      <CardActions onClick={() => alert(\"Go to weather app for more info\")}>\n        <Button size=\"small\">Learn More</Button>\n      </CardActions>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport Radio from \"@material-ui/core/Radio\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { inject, observer } from \"mobx-react\";\nimport ArrowBack from \"@material-ui/icons/ArrowBack\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowForward from \"@material-ui/icons/ArrowForward\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n\nimport InfoCard from \"../components/InfoCard\";\nimport LoadingCard from \"../components/LoadingCard\";\n\n@inject(\"weatherStore\")\n@observer\nclass Home extends React.Component {\n  _setIsCelcius = async (isCelcius) => {\n    const {\n      weatherStore: { fetchWeatherData, setIsCelcius, setIsRefreshing },\n    } = this.props;\n    setIsCelcius(isCelcius);\n    setIsRefreshing();\n    await fetchWeatherData(isCelcius);\n    setIsRefreshing(false);\n  };\n\n  setIsRefreshing = (value = true) => this.setState({ isRefreshing: value });\n\n  render() {\n    const {\n      weatherStore: {\n        isCelcius,\n        isRefreshing,\n        onVisibleDateBack,\n        visibleWeatherData,\n        onVisibleDateForward,\n      },\n    } = this.props;\n    return (\n      <Container>\n        <h1 className=\"mt-3\">Weather App</h1>\n        <Paper className=\"p-3 p-md-5 mt-4\">\n          <Row>\n            <Col className=\"d-flex justify-content-center\">\n              <FormControlLabel\n                value=\"celcius\"\n                label=\"Celcius\"\n                checked={isCelcius}\n                control={<Radio />}\n                onChange={(v) => this._setIsCelcius(true)}\n              />\n            </Col>\n            <Col className=\"d-flex justify-content-center\">\n              <FormControlLabel\n                value=\"fahrenheit\"\n                label=\"Fahrenheit\"\n                control={<Radio />}\n                checked={!isCelcius}\n                onChange={(v) => this._setIsCelcius(false)}\n              />\n            </Col>\n          </Row>\n          <Row className=\"d-flex my-3 justify-content-between\">\n            <IconButton size=\"medium\" onClick={() => onVisibleDateBack()}>\n              <ArrowBack />\n            </IconButton>\n            <IconButton size=\"medium\" onClick={() => onVisibleDateForward()}>\n              <ArrowForward />\n            </IconButton>\n          </Row>\n          {isRefreshing ? (\n            <Row>\n              <Col>\n                <LoadingCard isCelcius={isCelcius} />\n              </Col>\n              <Col>\n                <LoadingCard isCelcius={isCelcius} />\n              </Col>\n              <Col>\n                <LoadingCard isCelcius={isCelcius} />\n              </Col>\n            </Row>\n          ) : (\n            <Row>\n              {visibleWeatherData.map((item, i) => {\n                const dt = item.dt;\n                const jsDate = new Date(dt * 1000);\n                return (\n                  <Col key={dt}>\n                    <InfoCard\n                      temp={item.main.temp}\n                      isCelcius={isCelcius}\n                      humidity={item.main.humidity}\n                      convertedDate={jsDate.toDateString()}\n                    ></InfoCard>\n                  </Col>\n                );\n              })}\n            </Row>\n          )}\n        </Paper>\n      </Container>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { Col, Container } from \"react-bootstrap\";\n\nimport Home from \"./Home\";\n\n@inject(\"weatherStore\")\n@observer\nclass Initialize extends Component {\n  componentDidMount() {\n    const {\n      weatherStore: { fetchWeatherData },\n    } = this.props;\n    fetchWeatherData();\n  }\n\n  render() {\n    const {\n      weatherStore: { visibleWeatherData },\n    } = this.props;\n\n    if (visibleWeatherData) return <Home />;\n\n    return (\n      <Container className=\"h-100\">\n        <Col className=\"h-100 d-flex justify-content-center align-items-center\">\n          <p>Loading…</p>\n        </Col>\n      </Container>\n    );\n  }\n}\n\nexport default Initialize;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"mobx-react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport \"./index.css\";\nimport RootStore from \"./store/root_store\";\nimport Initialize from \"./pages/Initialize\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootStore = new RootStore();\nReactDOM.render(\n  <Provider rootStore={rootStore} weatherStore={rootStore.weatherStore}>\n    <Initialize />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import WeatherStore from \"./weather_store\";\n\nexport default class RootStore {\n  constructor() {\n    this.weatherStore = new WeatherStore(this);\n  }\n}","const { REACT_APP_APP_ID } = process.env;\n\nmodule.exports = {\n  appId: REACT_APP_APP_ID,\n};\n"],"sourceRoot":""}